"use strict";(self.webpackChunkrouter_docs=self.webpackChunkrouter_docs||[]).push([[1501],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>h});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(r),h=a,m=p["".concat(l,".").concat(h)]||p[h]||d[h]||o;return r?n.createElement(m,i(i({ref:t},u),{},{components:r})):n.createElement(m,i({ref:t},u))}));function h(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},10430:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var n=r(87462),a=(r(67294),r(3905));const o={title:"Step 3) Configure and Run an Orchestrator Instance",sidebar_position:3},i=void 0,s={unversionedId:"running-a-validator/on-devnet/configure-and-run-an-orchestrator-instance",id:"running-a-validator/on-devnet/configure-and-run-an-orchestrator-instance",title:"Step 3) Configure and Run an Orchestrator Instance",description:"Before proceeding with this step, make sure that you are running a validator. If note, follow this guide to become a validator.",source:"@site/docs/validators/running-a-validator/on-devnet/configure-and-run-an-orchestrator-instance.md",sourceDirName:"running-a-validator/on-devnet",slug:"/running-a-validator/on-devnet/configure-and-run-an-orchestrator-instance",permalink:"/validators/running-a-validator/on-devnet/configure-and-run-an-orchestrator-instance",draft:!1,editUrl:"https://github.com/router-protocol/docs/tree/main/docs/validators/running-a-validator/on-devnet/configure-and-run-an-orchestrator-instance.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{title:"Step 3) Configure and Run an Orchestrator Instance",sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Step 2) Setup a Validator Account",permalink:"/validators/running-a-validator/on-devnet/setup-a-validator-account"},next:{title:"On Mainnet",permalink:"/validators/running-a-validator/on-mainnet/"}},l={},c=[{value:"Cosmos Keys",id:"cosmos-keys",level:3},{value:"Ethereum Keys",id:"ethereum-keys",level:3}],u={toc:c};function d(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Before proceeding with this step, make sure that you are running a validator. If note, follow ",(0,a.kt)("a",{parentName:"p",href:"./setup-a-validator-account"},"this guide")," to become a validator."),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("b",null,"Step 3.1) Configure the orchestrator")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir .router-orchestrator\ncp network-config/devnet/10001/orchestrator-config.json ~/.router-orchestrator/config.json\ncd ~/.router-orchestrator\n")),(0,a.kt)("p",null,"Update the\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"chainRpc"),"\xa0in the\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"config.json"),"\xa0file with valid EVM RPC endpoints for all the chains."),(0,a.kt)("p",null,"Orchestrator also requires access to the validator's Cosmos and Ethereum credentials to sign transactions for the corresponding networks."),(0,a.kt)("h3",{id:"cosmos-keys"},"Cosmos Keys"),(0,a.kt)("p",null,"There are two ways to provide the credential access - a keyring with encrypted keys, or just a private key in plaintext."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"1. Cosmos Keyring")),(0,a.kt)("p",null,"Update the\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"cosmosPrivateKey"),"\xa0to the validator key name (or account address). Please note that the default keyring backend is a password-encrypted\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"file"),"\xa0on the disk."),(0,a.kt)("p",null,"The keyring path must be pointing to ",(0,a.kt)("inlineCode",{parentName:"p"},"homedir")," of the ",(0,a.kt)("inlineCode",{parentName:"p"},"routerd")," node, in case keys needs to be reused from there."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"2. Cosmos Private Key (Unsafe)")),(0,a.kt)("p",null,"Simply update the\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"cosmosPrivateKey"),"\xa0with the private key of the validator account."),(0,a.kt)("p",null,"To obtain the validator's Cosmos private key, run\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"routerd keys unsafe-export-eth-key $VALIDATOR_KEY_NAME"),"."),(0,a.kt)("h3",{id:"ethereum-keys"},"Ethereum Keys"),(0,a.kt)("p",null,"To provide the credential access, a private key in plaintext needs to be provided."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Ethereum Private Key (Unsafe)")),(0,a.kt)("p",null,"Simply update the\xa0",(0,a.kt)("inlineCode",{parentName:"p"},"ethPrivateKey"),"\xa0with an Ethereum private key from a new account.")),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("b",null,"Step 3.2) Register the Ethereum address")),(0,a.kt)("p",null,"Submit ",(0,a.kt)("inlineCode",{parentName:"p"},"set-orchestrator-address")," tx to Routerchain with ",(0,a.kt)("strong",{parentName:"p"},"orchestrator-router-address")," and ",(0,a.kt)("strong",{parentName:"p"},"orchestrator-eth-address.")," "),(0,a.kt)("p",null,"This tx will register the orchestrator addresses on Routerchain"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"routerd tx attestation set-orchestrator-address [orchestrator-router-address] [orchestrator-eth-address]\n\nExample: routerd tx attestation set-orchestrator-address router1emlu0gy7hju5pywvmkhy529f7s24ydtm49pwcl 0x1E5B81378a1D484169aB9b133FFD97003316e840 --from my-node --home ~/.routerd --keyring-backend file --chain-id router-1  --fees 100000000000000route\n")),(0,a.kt)("p",null,"Successful registration can be verified by checking for Validator's mapped Ethereum address on\xa0",(0,a.kt)("a",{parentName:"p",href:"https://devnet.lcd.routerprotocol.com/router-protocol/router-chain/attestation/list_orchestrators"},"list of orchestrators"),".")),(0,a.kt)("details",null,(0,a.kt)("summary",null,(0,a.kt)("b",null,"Step 3.3) Start the Orchestrator")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"cd ~/.router-orchestrator\nrouter-orchestrator start --reset --config ~/.router-orchestrator/config.json\n")),(0,a.kt)("p",null,"After executing the aforementioned commands, your orchestrator instance will start running. ")))}d.isMDXComponent=!0}}]);